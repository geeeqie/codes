(defun power (x p)
  (if (= p 0)
      1
      (* x (power x (- p 1)))))
(defun my-cons (a b)
  (* (power 2 a)
     (power 3 b)))
(defun how-much-factor (factor)
  (defun how-much-factor-inner (n count)
    (if (= (mod n factor) 0)
	(how-much-factor-inner (/ n factor) (+ count 1))
	count))
  #'(lambda (z) (how-much-factor-inner z 0)))
(defun my-car (z)
  (funcall (how-much-factor 2) z))
(defun my-cdr (z)
  (funcall (how-much-factor 3) z))
(defvar z (my-cons 2 3))
(my-car z)
(my-cdr z)
